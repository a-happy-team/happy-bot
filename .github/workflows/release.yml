name: Build and Deploy
on:
  release:
    types: [published]

jobs:
  build:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
    - uses: actions/checkout@v3
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Amazon ECR registry
      run: aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/happy:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to EC2 via SSH
    runs-on: ubuntu-latest
    needs: build
    environment: production
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: SSH and deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ vars.EC2_SSH_HOST }}
        username: ${{ vars.EC2_SSH_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com
          docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/happy:latest
          docker stop discord-bot || true
          docker rm discord-bot || true
          docker run -d --name discord-bot --restart unless-stopped \
            -e BOT_TOKEN=${{ secrets.BOT_TOKEN }} \
            -e SPOTIFY_CLIENT_ID=${{ secrets.SPOTIFY_CLIENT_ID }} \
            -e SPOTIFY_CLIENT_SECRET=${{ secrets.SPOTIFY_CLIENT_SECRET }} \
            -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
            -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            -e NEW_RELIC_LICENSE_KEY=${{ secrets.NEW_RELIC_LICENSE_KEY }} \
            -e NEW_RELIC_APP_NAME=${{ vars.NEW_RELIC_APP_NAME }} \
            -d ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/happy:latest
    - name: Delete old ECR images
      run: |
        aws ecr batch-delete-image --repository-name happy --region ${{ vars.AWS_REGION }} --image-ids imageTag=latest

  notify:
    name: Notify Discord
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Notify Discord channel
      uses: rjstone/discord-webhook-notify@v1
      with:
          severity: info
          details: New Release!
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}
