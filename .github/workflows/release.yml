name: Build and Deploy
on:
  release:
    types: [published]

env:
  BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
  SPOTIFY_CLIENT_ID: ${{ secrets.SPOTIFY_CLIENT_ID }}
  SPOTIFY_CLIENT_SECRET: ${{ secrets.SPOTIFY_CLIENT_SECRET }}

jobs:
  build:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: AWS ECR
      uses: kciter/aws-ecr-action@v4
      with:
        access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        account_id: ${{ secrets.AWS_ACCOUNT_ID }}
        repo: happy
        region: us-east-1
        tags: latest
    - name: Remove older images (all images except latest)
      run: |
        aws ecr describe-images --repository-name happy --query 'imageDetails[?imageTags[0]!=`latest`].[imageDigest]' --output text --region us-east-1 | xargs -I {} aws ecr batch-delete-image --repository-name happy --image-ids imageDigest={}

  deploy:
    name: Deploy to EC2 via SSH
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: SSH and deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ vars.EC2_SSH_HOST }}
        username: ${{ vars.EC2_SSH_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin 730335205362.dkr.ecr.us-east-1.amazonaws.com
          sudo docker pull 730335205362.dkr.ecr.us-east-1.amazonaws.com/happy:latest
          sudo docker stop discord-bot || true
          sudo docker rm discord-bot || true
          sudo docker run -d --name discord-bot --restart unless-stopped \
            -e BOT_TOKEN=$BOT_TOKEN \
            -e SPOTIFY_CLIENT_ID=$SPOTIFY_CLIENT_ID \
            -e SPOTIFY_CLIENT_SECRET=$SPOTIFY_CLIENT_SECRET \
            -d 730335205362.dkr.ecr.us-east-1.amazonaws.com/happy:latest
  
  notify:
    name: Notify on Discord
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Discord notification
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      uses: Ilshidur/action-discord@master
      with:
        args: 'The project {{ EVENT_PAYLOAD.repository.full_name }} has been deployed.'